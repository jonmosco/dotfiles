#!/bin/bash

mkd () {
  mkdir -p "$@" && cd "$@" || exit
}

# Overwrite when we need secure delete
secure_delete() {
  shred -f -n 4 "$1"
}

# Docker prompt
function prompt_docker() {
  # shellcheck disable=SC1090
  source ~/repos/kube-ps1/kube-ps1.sh

  # if [ -f /.dockerenv ]; then
    orange=$(tput setaf 166);
    white=$(tput setaf 15)
    yellow=$(tput setaf 136)
    reset_color=$(tput sgr0)

    PS1="\[${orange}\]\u" # username
    PS1+='\[${white}\]@' # @
    PS1+='\[${yellow}\]\h' # hostname
    # Unicode Moby
    PS1+=' üê≥ '
    PS1+='\[${white}\]:'
    PS1+='\[${green}\]\W'
    PS1+='\[${white}\]:'
    PS1+='$(kube_ps1)' # kube-ps1 prompt
    PS1+='\[${reset_color}\]'
    PS1+='$ '
    export PS1
  # fi
}

function prompt_issue_27() {
  KUBE_PS1_SYMBOL_USE_IMG=true
  KUBE_PS1_SYMBOL_ENABLE=true
  KUBE_PS1_SEPARATOR=' '
  KUBE_PS1_PREFIX=''
  KUBE_PS1_SUFFIX=''
  KUBE_PS1_NS_ENABLE=false
  source ~/repos/kube-ps1/kube-ps1.sh
  source ~/.zsh/prompt/agnoster.zsh
  PROMPT='$(kube_ps1) ' $PROMPT
}

function prompt_issue_65() {
  export KUBE_PS1_SYMBOL_DEFAULT='lll'
}

# Restore default prompt
function prompt_default () {
  # shellcheck disable=SC1090
  source ~/.zsh/prompt/steeef.zsh-theme
}

# kubectl context
function prompt_k8s () {
  # shellcheck disable=SC1090
  source ~/repos/kube-ps1/kube-ps1.sh
  # shellcheck disable=SC2125
  PROMPT=$'
%F{166}%n${PR_RST} $fg[white]%}at${PR_RST} %{$orange%}%m${PR_RST} $fg[white]%}in${PR_RST} %{$limegreen%}%~ ${PR_RST}$(virtualenv_info)${PR_RST}$(kube_ps1)${PR_RST}
$ '
}

# kubectl context
function prompt_k8s_omz () {
  # shellcheck disable=SC1090
  source ~/repos/oh-my-zsh/plugins/kube-ps1/kube-ps1.zsh
  # shellcheck disable=SC2125
  PROMPT=$'
%F{166}%n${PR_RST} $fg[white]%}at${PR_RST} %{$orange%}%m${PR_RST} $fg[white]%}in${PR_RST} %{$limegreen%}%~${PR_RST} $(git_super_status)$(virtualenv_info)$(kube_ps1)
$ '
}

# Switch to a simple prompt to aid in pasting
function prompt_paste () {
  export PROMPT='$ '
}

function prompt_simple () {
  # Robby Russel prompt to use for minimal prompt
  ret_status="%(?:%F{166%}‚ûú${PR_RST} :%{$fg_no_bold[red]%}‚ûú${PR_RST} )"
  # shellcheck disable=SC2016
  PROMPT='${ret_status} %{$fg[cyan]%}%c%{$reset_color%}${PR_RST} '
}

function prompt_simple_k8s () {
  #KUBE_PS1_SYMBOL_USE_IMG=true
  #KUBE_PS1_SYMBOL_ENABLE=true
  #KUBE_PS1_SEPARATOR=' '
  #KUBE_PS1_PREFIX=''
  #KUBE_PS1_SUFFIX=''
  #KUBE_PS1_NS_ENABLE=false
  # shellcheck disable=SC1090
  # KUBE_PS1_DEFAULT_LABEL_IMG=false
  source ~/repos/kube-ps1/kube-ps1-devel/kube-ps1.sh
  # ret_status="%(?:%F{166}‚ûú :%{$fg_no_bold[red]%}‚ûú )"
  local ret_status="%(?:%{$fg_bold[green]%}‚ûú :%{$fg_bold[red]%}‚ûú )"
  # shellcheck disable=SC2016
  # PROMPT='${ret_status} %{%F{cyan}%}%c%{$reset_color%}${PR_RST}$(kube_ps1) '
  PROMPT='%{${ret_status}%} %{$fg[cyan]%}%c%{$reset_color%} $(kube_ps1) '
}

function prompt_simple_k8s_img () {
  # shellcheck disable=SC1090
  # KUBE_PS1_DEFAULT_LABEL_IMG=true
  KUBE_PS1_LABEL_USE_IMG=true
  source ~/repos/kube-ps1/kube-ps1.sh
  ret_status="%(?:%F{166}‚ûú :%{$fg_no_bold[red]%}‚ûú )"
  # shellcheck disable=SC2016
  PROMPT='${ret_status} %{$fg[cyan]%}%c%{$reset_color%}%f$(git_super_status)%f$(kube_ps1) '
}

function prompt_k8s_eval () {
  # shellcheck disable=SC1090
  source ~/repos/kube-ps1/kube-ps1.sh
  # shellcheck disable=SC2034
  ret_status="%(?:%F{166}‚ûú :%{$fg_no_bold[red]%}‚ûú )"
  while :; do
    ts=$(date +%s%N) ; kube_ps1 ; tt=$((($(date +%s%N) - $ts)/1000000)) ; echo "Time taken: $tt milliseconds"
  done
}

function prompt_bash_k8s () {
  orange=$(tput setaf 166);
  green=$(tput setaf 64);

  # shellcheck disable=SC1090
  bash -l
  source ~/repos/kube-ps1/kube-ps1.sh
  PS1='\u@\h:\w\ $(kube_ps1) $ '
  export PS1
}

# Flush DNS cache
# sometimes after being on VPN, DNS gets a little strange
function flush_dns() {
  sudo killall -HUP mDNSResponder;sudo killall mDNSResponderHelper;sudo dscacheutil -flushcache
}

# Extract yaml from a running deployment
function k8s_yaml_extract() {
  if [[ $# -ne 1 ]]; then
    echo "Usage: $0 output.yaml"
    exit 1
  fi
  kubectl get deployment "$1" -o yaml --export "$2"
}

# Get the latest Linux Kernel version
function kver() {
  curl -s https://www.kernel.org/releases.json | jq '.latest_stable.version' -r
}

function kcdebug() {
    kubectl run -i --rm --tty debug --image=debian:stable-slim --restart=Never -- bash
}

function dnsutil() {
    docker run -it gcr.io/kubernetes-e2e-test-images/dnsutils:1.3 /bin/sh
}
